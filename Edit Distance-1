Edit Distance-1:

Given two strings S1 and S2, return the minimum number of operations required to convert S1 to S2.
You have the following three operations to convert S1 to S2:Insert a character in S1Delete a character in S1Replace a character in S1Input Format
The input consists of T test cases, each followed by 2T lines. The first line of each test case contains S1, and the second line contains S2.

Output Format
For each test case, print minimum number of operations required to convert S1 to S2.

Constraints
30 points
1 <= T <= 10
1 <= len(S1), len(S2) <= 10

70 points
1 <= T <= 100
1 <= len(S1), len(S2) <= 500

General Constraints
'a' <= S1[i], S2[i] <= 'z'

Example
Input
2
horse
ros
intention
execution

Output
3
5

Explanation
Test Case 1:
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Test Case 2:
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

code:
def edit_distance(S1,S2):
    N = len(S1)
    M = len(S2)
    dp = [[0]*(M+1) for _ in range(N+1)]
    for i in range(N+1):
        dp[i][0]=i
    for j in range(M+1):
        dp[0][j]=j
    for i in range(1,N+1):
        for j in range(1,M+1):
            if S1[i-1] == S2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1])
    return dp[N][M]
t = int(input())
for _ in range(t):
    S1 = input().strip()
    S2 = input().strip()
    print(edit_distance(S1,S2))
