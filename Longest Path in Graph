Longest Path in Graph:

Given an undirected, acyclic-connected graph, find the length of the longest path in the graph.

Input Format
The first line of input contains T - the number of test cases. The first line of each test case contains N - number of nodes and M - number of edges. It is followed by M lines, each containing a pair (u,v) - denoting an undirected edge between node u and node v.

Output Format
For each test case, print the length of the longest path in the graph, separated by a new line.

Constraints
50 points
1 <= T <= 1000
1 <= N <= 100
1 <= u, v <= N

100 points
1 <= T <= 1000
1 <= N <= 10000
1 <= u, v <= N

Example
Input
2
8 7
7 4
6 1
6 5
3 4
1 2
1 3
1 8
11 10
1 5
5 3
4 1
9 1
10 4
2 10
7 2
6 10
11 4
1 8

Output
5
6

code:
def DFS(node,parent,dist,G):
    farthest_Node = node
    max_dist = dist
    for neighbour in G[node]:
        if neighbour!=parent:
            n_node, n_dist = DFS(neighbour,node,dist+1,G)
            if n_dist > max_dist:
                max_dist = n_dist
                farthest_Node = n_node
    return farthest_Node,max_dist
T = int(input())
for _ in range(T):
    N,M = map(int,input().split())
    G = [[] for _ in range(N+1)]
    for __ in range(M):
        U,V = map(int,input().split())
        G[U].append(V)
        G[V].append(U)
    a,_ = DFS(1,-1,0,G)
    b,distance = DFS(a,-1,0,G)
    print(distance)
