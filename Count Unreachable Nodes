Count Unreachable Nodes:

You are given an undirected, unweighted simple graph. Count the number of pairs of different nodes that are unreachable from each other.

Input format
The first line of input contains an integer T - number of test cases. The first line of each test case contains N - number of vertices and M - number of edges in the graph.
Its followed by M lines, each contains a pair (u,v) - denoting an undirected edge between node u and node v.

Output format
For each test case, print the number of pairs of different nodes that are unreachable from each other, separated by newline.

Constraints
1 <= T <= 100
1 <= N <= 105
0 <= M <= 105
1 <= u, v <= N

Example
Input Format
2
6 5
1 2
2 3
3 4
4 1
5 6
3 3
1 2
1 3
2 3

Output Format
8
0

code:
t = int(input())
for _ in range(t):
    N,M = map(int,input().split())
    G = [[] for _ in range(N+1)]
    visited = [False]*(N+1)
    for _ in range(M):
        U,V = map(int,input().split())
        G[U].append(V)
        G[V].append(U)
    def dfs(U):
        size = 1
        visited[U] = True
        for V in G[U]:
            if not visited[V]:
                size+=dfs(V)
        return size
    component_size = []
    for i in range(1,N+1):
        component_size.append(dfs(i))
    total_pairs = N*(N-1)//2
    reachable_pairs = sum(size*(size-1)//2 for size in component_size)
    unreachable_pairs = total_pairs - reachable_pairs
    print(unreachable_pairs)
