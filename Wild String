Wild String:

Given a string S, you have to determine the minimum number of operations needed to print the string S. In a single operation, you can print a sequence of the same character from any index to any index.

Input Format
The first line of input contains T - number of test cases. It's followed by 2T lines. The first line of each test case contains N - the size of the string and the second line of each test case contains string S.

Output Format
For each test case, print minimum number of operations required.

Constraints
50 points
1 <= T <= 10
1 <= N <= 20
'a' <= S[i] <= 'z'

100 points
1 <= T <= 100
1 <= N <= 100
'a' <= S[i] <= 'z'

Example
Input
2
6
aaabbb
6
ababab

Output
2
4

Explanation

Test Case 1:
Print "aaa" from [1,3] and then print "bbb" from [4,6]. Alternatively, you can also print "aaaaaa" from [1,6] and then print "bbb" from [4,6] or print "bbbbbb" from [1,6] and then print "aaa" from [1,3].

Test Case 2:
Print "aaaaaa" from index 1 to index 6 and then print "b" at index [2,2], [4,4], [6,6]. Alternatively, print "bbbbbb" from index 1 to index 6 and then print "a" at index [1,1], [3,3], [5,5].

code:
def wild_string(N,S):
    dp = [[0]*N for _ in range(N)]
    for i in range(N-1,-1,-1):
        for j in range(i,N):
            if i==j:
                dp[i][j] = 1
            else:
                dp[i][j] = dp[i][j-1] + 1
                for k in range(i,j):
                    if S[k]==S[j]:
                        dp[i][j] = min(dp[i][j],dp[i][k] + dp[k+1][j-1])
    return dp[0][N-1] 
T = int(input())
for _ in range(T):
    N = int(input())
    S = input().strip()
    print(wild_string(N,S))
