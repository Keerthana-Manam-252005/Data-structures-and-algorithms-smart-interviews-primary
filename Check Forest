Check Forest:

Given an undirected graph, determine if the given graph is a forest. A forest is a disjoint union of trees. A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any acyclic-connected graph is a tree.

Input Format
The first line of input contains T - the number of test cases. The first line of each test case contains N - number of nodes and M - number of edges. It is followed by M lines, each containing a pair (u,v) - denoting an undirected edge between node u and node v.

Output Format
For each test case, print "Yes" if the graph is a forest, print "No" otherwise, separated by a newline.

Constraints
1 <= T <= 1000
1 <= N <= 10000
1 <= M <= N
1 <= u, v <= N

Example
Input
4
5 4
1 3
2 3
4 5
2 1
5 3
1 3
2 3
4 5
5 4
1 2
3 4
1 3
4 5
6 5
1 4
2 4
3 5
5 6
2 1

Output
No
Yes
Yes
No

code:
def is_forest(N,M,G):
    def dfs(node,parent):
        visited[node] = True
        for neighbour in G[node]:
            if not visited[neighbour]:
                if not dfs(neighbour,node):
                    return False
            elif neighbour!=parent:
                return False #cycle detected
        return True
    for i in range(1,N+1):
        if not visited[i]:
            if not dfs(i,-1):
                return False
    return True
t = int(input())
for _ in range(t):
    N,M = map(int,input().split())
    G = [[] for _ in range(N+1)]
    visited = [False]*(N+1)
    for _ in range(M):
        U,V = map(int,input().split())
        G[U].append(V)
        G[V].append(U)
    print("Yes" if is_forest(N,M,G) else "No")
