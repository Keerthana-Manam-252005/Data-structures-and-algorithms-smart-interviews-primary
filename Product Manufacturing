Product Manufacturing:

There are M manufacturers and each of them produces a range of products.
M1: [a1, b1]
M2: [a2, b2]
and so on...

Given a product ID, find how many manufacturers produce the given product.

Input Format
The first line of input contains T - the number of test cases. The first line of each test case contains an integer M. The Next M lines contain the ith manufacturer's range of products id's - starting(S) and ending(E) (both inclusive). The next line contains Q - number of queries and the next Q lines contain a single integer denoting the ID of the product.

Output Format
For each test case, print the number of merchants producing the given product for each query, separated by a new line.

Constraints
20 points
1 <= T <= 100
1 <= M, Q <= 1000
1 <= S <= E <= 104
1 <= ID <= 104

30 points
1 <= T <= 100
1 <= M, Q <= 10000
1 <= S <= E <= 104
1 <= ID <= 104

50 points
1 <= T <= 100
1 <= M, Q <= 10000
1 <= S <= E <= 109
1 <= ID <= 109

Example
Input
1
4
1 3
1 6
3 5
5 9
4
3
8
6
10

Output
3
1
2
0


code:
import bisect
def product_manufacturing(M,ranges,Q,queries):
    starts = sorted(s for s,e in ranges)
    ends = sorted(e for s,e in ranges)
    res = []
    for i in queries:
        start_count = bisect.bisect_right(starts,i)
        end_count = bisect.bisect_left(ends,i)
        res.append(start_count - end_count)
    return res
t = int(input())
for _ in range(t):
    M = int(input())
    ranges = [tuple(map(int,input().split())) for _ in range(M)]
    Q = int(input())
    queries = [int(input()) for _ in range(Q)]
    ans = product_manufacturing(M,ranges,Q,queries)
    for i in ans:
        print(i)

(or)

def productmanufacturing(m,ranges,q,queries):
    def upperbound(arr,x):
        low,high=0,len(arr)
        while low<high:
            mid=(low+high)//2
            if arr[mid]<=x:
                low=mid+1
            else:
                high=mid
        return low
    def lowerbound(arr,x):
        low,high=0,len(arr)
        while low<high:
            mid=(low+high)//2
            if arr[mid]<x:
                low=mid+1
            else:
                high=mid
        return low
    starts,ends=[],[]
    for s,e in ranges:
        starts.append(s)
        ends.append(e)
    starts.sort()        
    ends.sort()
    ans=[]
    for q in queries:
        startcount=upperbound(starts,q)
        endcount=lowerbound(ends,q)
        ans.append(startcount-endcount)
    return ans
t=int(input())
for _ in range(t):
    m=int(input())
    ranges=[]
    for _ in range(m):
        s,e =map(int,input().split())
        ranges.append((s,e))
    q=int(input())
    queries=[]
    for _ in range(q):
        queries.append(int(input()))
    res=productmanufacturing(m,ranges,q,queries)
    for i in res:
        print(i)
