Number of Connected Components:

Given an undirected graph, you have to find the number of connected components in the graph.

Input Format
The first line of input contains T - number of test cases. First line of each test case contains N - number of nodes and M - number of edges. It is followed by M lines, each contains a pair (u,v) - denoting an undirected edge between node u and node v.

Output Format
For each test case, print the number of connected components, separated by new line.

Constraints
1 <= T <= 1000
1 <= N <= 1000
0 <= M <= min(N*N, 1000)
1 <= u, v <= N

Example
Input
2
5 3
1 3
2 4
3 2
10 9
3 4
5 1
2 5
4 6
2 3
6 3
1 4
8 9
8 10

Output
2
3

code:
def DFS(node,G,visited):
    visited[node] = True
    for neighbour in G[node]:
        if not visited[neighbour]:
            DFS(neighbour,G,visited)
T = int(input())
for _ in range(T):
    N,M = map(int,input().split())
    G = [[] for _ in range(N+1)]
    for _ in range(M):
        U,V = map(int,input().split())
        G[U].append(V)
        G[V].append(U)
    visited = [False]*(N+1)
    connected_Components = 0
    for i in range(1,N+1):
        if not visited[i]:
            DFS(i,G,visited)
            connected_Components+= 1
    print(connected_Components)
