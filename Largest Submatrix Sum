Largest Submatrix Sum:

Given a 2D matrix of size NxM, find the maximum submatrix sum.

Input Format
The first line of input contains T - number of test cases. First line of each test case contains 2 integers - N and M - the size of the matrix. It is followed by N lines each containing M integers.

Output Format
For each test case, print the maximum submatrix sum, separated by new line.

Constraints
10 points
1 <= T <= 1000
1 <= N, M <= 10

30 points
1 <= T <= 1000
1 <= N, M <= 20

60 points
1 <= T <= 1000
1 <= N, M <= 50

100 points
1 <= T <= 1000
1 <= N, M <= 100

General Constraints
-100 <= Mat[i][j] <= 100

Example
Input
3
4 4
-10 -20 -30 -40
-10 20 -5 -10
-10 -5 20 -10
-10 -20 -30 -40
2 6
24 -43 3 28 -48 61
-53 37 -41 -25 12 -59
5 3
13 -4 0
-20 -8 20
4 6 -26
32 8 29
-43 -29 -53

Output
30
61
69

code:
def kadane(arr):
    max_sum = float('-inf')
    cur_sum = 0
    for i in arr:
        cur_sum = max(i,cur_sum+i)
        max_sum = max(cur_sum,max_sum)
    return max_sum

def largest_submatrix_sum(n,m,mat):
    res = []
    max_submatrix_sum = float('-inf')
    for i in range(n):
        pre = [0]*m
        for j in range(i,n):
            for k in range(m):
                pre[k]+= mat[j][k]
            max_submatrix_sum = max(max_submatrix_sum,kadane(pre))
    res.append(max_submatrix_sum)
    return res
t = int(input())
for _ in range(t):
    n,m = list(map(int,input().split()))
    mat = [list(map(int,input().split())) for _ in range(n)]
    print(*largest_submatrix_sum(n,m,mat))
