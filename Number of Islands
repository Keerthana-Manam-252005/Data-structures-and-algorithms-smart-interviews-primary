Number of Islands:

You are given a 2D matrix consisting of the following:
1: Land
0: Water

Considering N-8 neighbourhood, your task is to find the number of islands in the given landscape.
Assume that the 2D matrix is surrounded by water beyond the boundaries.

Definitions:N-8 neighbourhood: 2 cells are considered neighbours, if they share an edge or a corner.Island: A piece of connected land surrounded by water.Input Format
The first line of input contains T - the number of test cases. The first line of each test case contains R, C - the size of the matrix. It is followed by a matrix of size RxC, consisting only of 0s and 1s.

Output Format
For each test case, print the total number of islands, separated by a new line.

Constraints
1 <= T <= 100
1 <= R, C <= 500

Example
Input
3
4 8
01001101
10001010
00100100
01101101
6 1
0
1
0
0
1
1
9 5
00000
10001
00110
01100
10000
00000
00101
00011
00110

Output
4
2
3

code:
import sys
sys.setrecursionlimit(10**6)
def dfs(i,j):
    if i<0 or j<0 or i>=R or j>=C or grid[i][j]!=1:
        return 0
    grid[i][j]=0
    dfs(i+1,j)
    dfs(i-1,j)
    dfs(i,j+1)
    dfs(i,j-1)
    dfs(i-1,j-1)
    dfs(i+1,j+1)
    dfs(i+1,j-1)
    dfs(i-1,j+1)
t = int(input())
for _ in range(t):
    R,C = map(int,input().split())
    grid = [list(map(int,input().strip())) for _ in range(R)]
    islands = 0
    for i in range(R):
        for j in range(C):
            if grid[i][j]==1:
                islands+=1
                dfs(i,j)
    print(islands)
